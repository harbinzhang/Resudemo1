#!/usr/bin/env node

/**
 * Generate Firebase configuration from environment variables
 * This script reads from .env file and creates public/js/firebase-config.js
 */

const fs = require('fs');
const path = require('path');

// Function to load environment variables from .env file
function loadEnvFile() {
    const envPath = path.join(__dirname, '..', '.env');
    
    if (!fs.existsSync(envPath)) {
        console.error('Error: .env file not found!');
        console.log('Please create a .env file based on .env.example');
        process.exit(1);
    }
    
    const envContent = fs.readFileSync(envPath, 'utf8');
    const envVars = {};
    
    envContent.split('\n').forEach(line => {
        // Skip comments and empty lines
        if (line.startsWith('#') || !line.trim()) return;
        
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
            envVars[key.trim()] = valueParts.join('=').trim();
        }
    });
    
    return envVars;
}

// Load environment variables
const env = loadEnvFile();

// Validate required environment variables
const requiredVars = [
    'FIREBASE_API_KEY',
    'FIREBASE_AUTH_DOMAIN',
    'FIREBASE_PROJECT_ID',
    'FIREBASE_STORAGE_BUCKET',
    'FIREBASE_MESSAGING_SENDER_ID',
    'FIREBASE_APP_ID'
];

const missingVars = requiredVars.filter(varName => !env[varName]);
if (missingVars.length > 0) {
    console.error('Error: Missing required environment variables:');
    missingVars.forEach(varName => console.error(`  - ${varName}`));
    console.log('\nPlease check your .env file and ensure all required variables are set.');
    process.exit(1);
}

// Generate the firebase-config.js content
const configContent = `// Firebase Configuration
// This file is auto-generated from environment variables
// DO NOT EDIT THIS FILE DIRECTLY - Edit .env instead
// Generated at: ${new Date().toISOString()}

const firebaseConfig = {
    apiKey:             "${env.FIREBASE_API_KEY}",
    authDomain:         "${env.FIREBASE_AUTH_DOMAIN}",
    projectId:          "${env.FIREBASE_PROJECT_ID}",
    storageBucket:      "${env.FIREBASE_STORAGE_BUCKET}",
    messagingSenderId:  "${env.FIREBASE_MESSAGING_SENDER_ID}",
    appId:              "${env.FIREBASE_APP_ID}"
};

// Initialize Firebase
const app = firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();
const storage = firebase.storage();

// Connect to emulators when running locally
if (location.hostname === "localhost") {
    auth.useEmulator("http://localhost:9099");
    db.useEmulator("localhost", 8080);
    storage.useEmulator("localhost", 9199);
    console.log("Connected to Firebase emulators");
}

// Export for use in other scripts
window.firebaseApp = app;
window.firebaseAuth = auth;
window.firebaseDB = db;
window.firebaseStorage = storage;`;

// Create public/js directory if it doesn't exist
const jsDir = path.join(__dirname, '..', 'public', 'js');
if (!fs.existsSync(jsDir)) {
    fs.mkdirSync(jsDir, { recursive: true });
}

// Write the configuration file
const configPath = path.join(jsDir, 'firebase-config.js');
fs.writeFileSync(configPath, configContent);

console.log('âœ… Firebase configuration generated successfully!');
console.log(`   Created: ${configPath}`);
console.log('\nRemember:');
console.log('  - Never commit .env file to version control');
console.log('  - firebase-config.js is now auto-generated and should not be edited directly');
console.log('  - Run this script whenever you update .env variables');