rules_version = '2';

// service cloud.firestore {
//   match /databases/{database}/documents {
// 
//     // This rule allows anyone with your Firestore database reference to view, edit,
//     // and delete all data in your Firestore database. It is useful for getting
//     // started, but it is configured to expire after 30 days because it
//     // leaves your app open to attackers. At that time, all client
//     // requests to your Firestore database will be denied.
//     //
//     // Make sure to write security rules for your app before that time, or else
//     // all client requests to your Firestore database will be denied until you Update
//     // your rules
//     match /{document=**} {
//       allow read, write: if request.time < timestamp.date(2025, 10, 12);
//     }
//   }
// }

service cloud.firestore {
  match /databases/{database}/documents {
    // User collection - users can only access their own document
    match /user/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // File collection - users can only access documents they own
    match /file/{fileId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.owner;
      // For creating new documents, check the incoming data
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.owner;
    }
    
    // Analysis collection - users can only access documents they own
    match /analysis/{analysisId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.owner;
      // For creating new documents, check the incoming data
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.owner;
    }
    
    // Deny access to all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}